    Instale o Flask e o driver do MySQL para Python. Você pode instalar o Flask digitando pip install Flask no seu terminal. Para instalar o driver do MySQL para Python, digite pip install mysql-connector-python ou pip install pymysql.

    Crie um banco de dados MySQL para armazenar informações sobre seus produtos. Você pode usar uma ferramenta como o phpMyAdmin para criar seu banco de dados e definir suas tabelas.

    Crie um arquivo config.py para armazenar suas configurações de banco de dados.

python

# config.py
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'sua-chave-secreta-aqui'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'mysql+mysqlconnector://usuario:senha@localhost/nome-do-banco-de-dados'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    Crie um arquivo app.py e configure seu aplicativo Flask para usar o SQLAlchemy para interagir com seu banco de dados MySQL.

python

# app.py
from flask import Flask, render_template, request
from flask_sqlalchemy import SQLAlchemy
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

db = SQLAlchemy(app)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    description = db.Column(db.String(200))
    price = db.Column(db.Float, nullable=False)

@app.route('/')
def index():
    products = Product.query.all()
    return render_template('index.html', products=products)

@app.route('/search')
def search():
    query = request.args.get('query')
    products = Product.query.filter(Product.name.contains(query)).all()
    return render_template('index.html', products=products)

@app.route('/product/<int:id>')
def product(id):
    product = Product.query.get(id)
    return render_template('product.html', product=product)

    Crie uma página HTML para exibir seus produtos. Você pode usar o Jinja2 para renderizar seus modelos de produto em seu HTML.

html

<!-- templates/index.html -->
<!DOCTYPE html>
<html>
  <head>
    <title>Catálogo de produtos</title>
  </head>
  <body>
    <h1>Catálogo de produtos</h1>
    <form method="GET" action="{{ url_for('search') }}">
      <input type="text" name="query">
      <input type="submit" value="Pesquisar">
    </form>
    <ul>
      {% for product in products %}
      <li><a href="{{ url_for('product', id=product.id) }}">{{ product.name }}</a> - R$ {{ product.price }}</li>
      {% endfor %}
    </ul>
  </body>
</html>

    Crie uma página HTML para exibir os detalhes do produto. Você pode usar o Jinja2 para renderizar as informações do produto em seu HTML.

html

<!-- templates/product.html -->
<!DOCTYPE html>
<html>
  <head>
    <title>{{ product.name }}</title>
  </head>
  <body>
    <h1>{{ product.name }}</h1>
    <p>{{ product.description }}</p>
    <p>Preço: R$ {{ product.price }}</p>
  </body>
</html>

